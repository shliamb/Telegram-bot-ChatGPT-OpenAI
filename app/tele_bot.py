import os
import telebot
from telebot import types
from keys import token, white_list, admin_user_ids, block
from worker_db import read_tele_user, add_update_tele_user, add_default_data, get_settings, update_talking, add_update_settings, admin_static_db
import asyncio
from open_ai import main
import csv
from io import StringIO, BytesIO
import datetime


bot = telebot.TeleBot(token) # Conection for API Telegram


# /start 
@bot.message_handler(commands=['start'])
def start(context):
    id = context.from_user.id # telegram id user were tap /start
    name = context.from_user.username
    first_name = context.from_user.first_name
    last_name = context.from_user.last_name
    chat = context.chat.id
    is_user_admin = False
    is_user_block = False
    is_user_good = 3

    # Checking and added the parameters
    if str(id) in admin_user_ids:
        is_user_admin = True
    if str(id) in block:
        is_user_block=True
    
    # If this user is not in the database, we will add or update, because the user could get a block
    add_update_tele_user(id=id, user_username=name, user_first_name=first_name, user_last_name=last_name, chat_id=chat, is_user_admin=is_user_admin , is_user_block=is_user_block , is_user_good=is_user_good) # abstractness
    add_default_data(id) # Set default settings and text
    
    # Checking and added the parameters in Settings to white list users And gives them money
    if str(id) in white_list:
        money = 1000
        add_update_settings(id, money_user=money) # Gives money
    
    # Choosing a name user
    if name:
        about = name
    elif first_name:
        about = first_name
    elif last_name:
        about = last_name
    else:
        about = "bro"

    bot.send_message(context.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç {about}! –ú–Ω–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å - /setup.")


# Admin statistic lite menu /admin
@bot.message_handler(commands=['admin'])
def admin(call):
    id = call.from_user.id # telegram id user
    data = read_tele_user(id)
    if data: # –µ–±–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–Ω–æ—è..
        if data[5] == True:
            bot.send_message(call.chat.id, text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /admin_static\n–°–∫–∞—á–∞—Ç—å: /log\n–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏: /clearlog")
        else:
            bot.send_message(call.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

# Admin statistic /admin_static
@bot.message_handler(commands=['admin_static'])
def admin_static(call):
    id = call.from_user.id # telegram id user
    bot.send_chat_action(call.chat.id, 'typing') # Typing bot
    data = read_tele_user(id)
    if data: # if the data exists
        if data[5] == True: # if user is admin
            static = admin_static_db()
            all_static = []
            all_static.append(["Name", "First name", "Used token", "Limit token"]) # First a names row
            for user_data in static:
                if all_static:
                    all_static.append([user_data[0], user_data[1], user_data[2], user_data[3]]) # added user data
            # Create CVS file
            output = StringIO()
            writer = csv.writer(output)
            for row in all_static:
                writer.writerow(row)
            csv_data = output.getvalue()
            output.close()
            # CVS file to download
            file = BytesIO(csv_data.encode())
            # Name file
            date_time = datetime.datetime.utcnow() # Current date and time
            formtime = date_time.strftime("%Y-%m-%d-%H-%M")
            
            file.name = f"Stat-{formtime}.csv"
            bot.send_document(call.chat.id, file)
        else:
            bot.send_message(call.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

# Admin clear log /clearlog
@bot.message_handler(commands=['clearlog'])
def users_limits(call):
    id = call.from_user.id # telegram id user
    data = read_tele_user(id)
    if data:
        if data[5] == True:
            bot.send_chat_action(call.chat.id, 'typing') # Typing bot
            log_file_path = './log/app.log'
            # Send Server log file to bot
            with open(log_file_path, 'w'):
                pass
            bot.send_message(call.chat.id, text="–§–∞–π–ª app.log –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            bot.send_message(call.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

# Admin downloud log file /log
@bot.message_handler(commands=['log'])
def log(call):
    id = call.from_user.id # telegram id user
    data = read_tele_user(id)
    if data:
        if data[5] == True:
            bot.send_chat_action(call.chat.id, 'typing') # Typing bot
            log_file_path = './log/app.log'
            # Send Server log file to bot
            if os.path.exists(log_file_path) and os.path.getsize(log_file_path) > 0: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –Ω–µ–ø—É—Å—Ç–æ—Ç—É
                with open(log_file_path, 'rb') as log_file:
                    bot.send_document(call.chat.id, document=log_file)
            else:
                bot.send_message(call.chat.id, text="–§–∞–π–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.")
        else:
            bot.send_message(call.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

# Messages to OpenAI
@bot.message_handler(func=lambda message: message.text is not None and not message.text.startswith('/')) # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä Telebot –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ /
def handle_message(message):
    bot.send_chat_action(message.chat.id, 'typing') # Typing bot
    id = message.from_user.id # telegram id user
    user_money = get_settings(id)
    if user_money != (None, None): # If no have data from user - created
        if user_money[8] > 0 and user_money[8] != 0:

            async def run_main():
                bot.send_chat_action(message.chat.id, 'typing') # Typing bot
                result = await main(message.text, id) # Send to open_ai.py
                # If result on 
                if result:
                    text = result[0] # Text response
                    model = result[1] # The name of the model geting from the OpenAI response
                    used_token = result[2]
                    money = result[3] # geting from the Calculation.py
                    # money = user_money[8]

                send = f"{text}\n\n\n{model}\n–∏—Å–ø.:{used_token}—Ç–æ–∫–µ–Ω–æ–≤\n–í—Å–µ–≥–æ:{money}—Ä—É–±.\n–ù–∞—Å—Ç—Ä–æ–∏—Ç—å: /setup"
                bot.reply_to(message, send) # Send to Telegram user  - parse_mode='HTML'
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)       #  –≥–∞–≤–Ω–æ –∫–∞–∫–æ–µ —Ç–æ, –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è..
            loop.run_until_complete(run_main())

        else:
            bot.send_message(message.chat.id, text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ø–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å.\n –ü–æ–ø–æ–ª–Ω–∏—Ç—å - /setup") # bot.answer_callback_query(message.id, text='–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. üòâ', show_alert=True)
    else:
        start(message) # If no have data from user - created

# Menu Telebot
# Close mian menu
@bot.callback_query_handler(func=lambda call: call.data == "close_menu")
def handle_close_menu(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

# Menu /setup or /menu
@bot.message_handler(commands=['setup', 'menu', 'setings', 'set'])
def main_menu(message):
    #id = message.from_user.id # telegram id user
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    model = types.InlineKeyboardButton(text="–ú–æ–¥–µ–ª—å ChatGPT", callback_data="model")
    time_limit = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="time_limit")
    reset = types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset")
    stat = types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
    buy = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy")
    help = types.InlineKeyboardButton(text="help", callback_data="help")
    close_menu_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚úñÔ∏è", callback_data="close_menu")
    keyboard.add(model, time_limit, reset, stat, buy, help, close_menu_button)
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:", reply_markup=keyboard)

# Submenu at Main Menu - Model
def model(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1) # 3
    gpt4_1 = types.InlineKeyboardButton(text="ChatGPT 4 Turbo 1106", callback_data="gpt4_1")
    # gpt4 = types.InlineKeyboardButton(text="ChatGPT 4 0613", callback_data="gpt4")
    gpt3_5 = types.InlineKeyboardButton(text="ChatGPT 3.5 Turbo", callback_data="gpt3_5")
    keyboard.add(gpt4_1, gpt3_5) # gpt4
    back_button = types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å ChatGPT:", reply_markup=keyboard)

# Back in Submenu Model to Main Menu
def back_menu(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    model = types.InlineKeyboardButton(text="–ú–æ–¥–µ–ª—å ChatGPT", callback_data="model")
    time_limit = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="time_limit")
    reset = types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset")
    stat = types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
    buy = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy")
    help = types.InlineKeyboardButton(text="help", callback_data="help")
    close_menu_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚úñÔ∏è", callback_data="close_menu")
    keyboard.add(model, time_limit, reset, stat, buy, help, close_menu_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:", reply_markup=keyboard)

# Submenu at Main Menu - Time Limit
def time_limit(call):
    #settings = get_settings(id) # Get in DB all data settings
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    min30 = types.InlineKeyboardButton(text="30 –º–∏–Ω", callback_data="min30")
    min15 = types.InlineKeyboardButton(text="15 –º–∏–Ω", callback_data="min15")
    min5 = types.InlineKeyboardButton(text="5 –º–∏–Ω", callback_data="min5")
    min0 = types.InlineKeyboardButton(text="–ù–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å", callback_data="min0")
    keyboard.add(min30, min15, min5, min0)
    back_button = types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è ChatGPT:", reply_markup=keyboard)

# # SubMenu at Main Menu - Reset dialog
def reset(call):
    id = call.from_user.id # telegram id user
    update_talking(id, session_data='')
    bot.answer_callback_query(call.id, text='–í–∞—à –¥–∏–∞–ª–æ–≥ —Å ChatGPT —Å–±—Ä–æ—à–µ–Ω üòâ', show_alert=True)

# SubMenu at Main Menu - Statistic
def stat(call):
    id = call.from_user.id # telegram id user
    settings = get_settings(id) # Get in DB all data settings
    if settings is not None:
        model_chat = settings[7] # –ú–æ–¥–µ–ª—å
        the_gap = settings[6] # –ß–∞—Å—ã.–º–∏–Ω—É—Ç—ã –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è
        total_used_token = settings[4] # –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
        money = settings[8] # –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É
        all_money = settings[9] # –í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ –¥–µ–Ω–µ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        text = f"<b>–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏:</b> <i>{model_chat}</i>\n<b>–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞</b>: <i>{the_gap} —á–∞—Å.</i>\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> <i>{total_used_token}</i>\n<b>–ù–∞ —Å—á–µ—Ç—É:</b> <i>{money} —Ä—É–±.</i>\n<b>–í–Ω–µ—Å–µ–Ω–æ –¥–µ–Ω–µ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b> <i>{all_money} —Ä—É–±.</i>\n–°–∫–∞—á–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ 30 –¥–Ω–µ–π - /otchet" # <a>http://openai.com</a>  <code>–ø—Ä–∏–º–µ—Ä</code> <pre> –ü—Ä–∏–º–µ—Ä</pre> <i>–ü—Ä–∏–º–µ—Ä </i>
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id) # Close Menu
        bot.send_message(call.message.chat.id, text, parse_mode='HTML')

# Script working Menu
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    id = call.from_user.id # telegram id user
    # Model
    if call.data == "model":
        model(call)
    elif call.data == "gpt4":
        model_id="gpt-4"
        add_update_settings(id, model_id=model_id)
        bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ ChatGPT 4 0613!")
    elif call.data == "gpt4_1":
        model_id="gpt-4-1106-preview"
        add_update_settings(id, model_id=model_id)
        bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ ChatGPT 4 Turbo 1106 preview!")
    elif call.data == "gpt3_5":
        model_id="gpt-3.5-turbo"
        add_update_settings(id, model_id=model_id)
        bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ ChatGPT 3.5 turbo!")
    # Time
    elif call.data == "time_limit":
        time_limit(call)
    elif call.data == "min30":
        the_gap = 0.3
        add_update_settings(id, the_gap=the_gap)
        bot.answer_callback_query(call.id, "ChatGPT –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ 30 –º–∏–Ω—É—Ç!")
    elif call.data == "min15":
        the_gap = 0.15
        add_update_settings(id, the_gap=the_gap)
        bot.answer_callback_query(call.id, "ChatGPT –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ 15 –º–∏–Ω—É—Ç!")
    elif call.data == "min5":
        the_gap = 0.05
        add_update_settings(id, the_gap=the_gap)
        bot.answer_callback_query(call.id, "ChatGPT –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ 5 –º–∏–Ω—É—Ç!")
    elif call.data == "min0":
        the_gap = 0
        add_update_settings(id, the_gap=the_gap)
        bot.answer_callback_query(call.id, "ChatGPT –Ω–µ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥!")
    # Buy
    elif call.data == "buy":
        bot.answer_callback_query(call.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        # bot.send_message(call.chat.id, text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ø–æ—Ö–æ–∂–µ, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n@Shliambur")
        # buy(call)
    # Help
    elif call.data == "help":
        # bot.answer_callback_query(call.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text=f"–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ ChatGPT   –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OpenAI\n4 1000—Ç–æ–∫ - 3-6 —Ä—É–±\n3 1000—Ç–æ–∫ 1-2 —Ä—É–±.\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π OpenAi API –ø–ª–∞—Ç–Ω—ã–π, –∞ –ø–æ—Ç–æ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º ChatGPT –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.\n –ö–∞–∫ —ç–∫–æ–Ω–æ–º–∏—Ç—å:\n1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞–º—è—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–æ–±—â–µ.\nGPT 3.5 Turbo –¥–µ—à–µ–≤–ª–µ —Ä–∞–∑–∞ –≤ 3.\n–í –±–∞–∑–µ —Ö—Ä—è–Ω–∏—Ç—Å—è –ª–∏—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–µ–ø–æ–∫ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –≤–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ, –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å —á–∞—Ç–æ–º. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —ç—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –•—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –¥–æ—Ä–æ–≥–æ, –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.")
    # Reset
    elif call.data == "reset":
        reset(call)
    # Statistic
    elif call.data == "stat":
        stat(call)
    # Menu Back
    elif call.data == "back_menu":
        back_menu(call)


#####
start_bot = bot.polling() # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ run_bot.py