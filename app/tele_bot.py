import telebot
from telebot import types
from keys import token, azil, asilisav, admin_user_ids, block
from worker_db import read_tele_user, add_tele_user, add_default_data, get_settings
import asyncio
from open_ai import main

bot = telebot.TeleBot(token) # Conection for API Telegram


# /start
@bot.message_handler(commands=['start'])
def start(context):
    id = context.from_user.id # telegram id user were tap /start
    name = context.from_user.username
    first_name = context.from_user.first_name
    last_name = context.from_user.last_name
    chat = context.chat.id
    is_user_admin = False
    is_user_block = False
    is_user_good = 3

    # Checking and added the parameters
    if str(id) in admin_user_ids:
        is_user_admin = True
    if str(id) in block:
        is_user_block=True
    # Choosing a name
    if int(id) == int(azil) or int(id) == int(asilisav):
        about = "–¥–æ—á–µ–Ω—å–∫–∞ –æ—Ç –ø–∞–ø—ã"
        # –°–¥–µ–ª–∞—Ç—å –ª–∏–º–∏—Ç—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ
    elif name:
        about = name
    elif first_name:
        about = first_name
    elif last_name:
        about = last_name
    else:
        about = "–¥—Ä—É–≥"

    bot.send_message(context.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç {about}! –ú–Ω–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å - /setup.")
    read_user_all_data = read_tele_user(id) # Reading in DB all data for user id
    # If this user is not in the database, we will add
    if read_user_all_data == None:
        add_tele_user(user_id=id, user_username=name, user_first_name=first_name, user_last_name=last_name, chat_id=chat, is_user_admin=is_user_admin , is_user_block=is_user_block , is_user_good=is_user_good) # abstractness
        add_default_data(id)


# # /admin - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –±–∞–∑—ã, —Ç–æ–∫–µ–Ω—ã..
# @bot.message_handler(commands=['admin'])
# def start(context): 


# Message from OpenAI
@bot.message_handler(func=lambda message: message.text is not None and not message.text.startswith('/')) # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä Telebot –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ /
def handle_message(message):
    bot.send_chat_action(message.chat.id, 'typing') # Typing bot

    user_id = message.from_user.id # –¢–µ–ª–µ–≥—Ä–∞–º id –Ω–∞—á–∞–≤—à–µ–≥–æ –¥–∏–∞–ª–æ–≥
    id_all = read_tele_user(user_id)# –í—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–æ id –≤ —Ç–∞–±–ª–∏—Ü–µ Users Telegram
    if id_all == None:
        start(message) # –ï—Å–ª–∏ –ø–æ—á–µ–º—É —Ç–æ –Ω–µ –Ω–∞–∂–∞–ª /start, –Ω–∞–∂–∏–º–∞–µ–º
        print("This User ID is None in DB. Automatically add.") # raise ValueError("ID is None. Program stopped. So Soory bro.") - –∂–µ—Å—Ç–∫–æ –≤—ã–π–¥–µ—Ç –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    id_all = read_tele_user(user_id)# –í—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–æ id –≤ —Ç–∞–±–ª–∏—Ü–µ Users Telegram
    id = id_all[4] # id 4 –ø–æ —Å—á–µ—Ç—É –≤ –∫–æ—Ä—Ç–µ–∂–µ

    async def run_main():
        bot.send_chat_action(message.chat.id, 'typing') # Typing bot
        result = await main(message.text, id)
        send = f"{result[0]}\n- - - - - - - - - - - - - - - - - - - - - - - - - -\n–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {result[1]}\n–¢–æ–∫. –≤–æ–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç: {result[4]}\n–¢–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {result[5]}\n–¢–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {result[6]}" #–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {result[2]}\n–ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–∫–µ–Ω—ã: {result[3]}\n–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {result[4]}"
        # send = f"{–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è}\n<b>–ñ–∏—Ä–Ω—ã–º - b</b> <i>–ö—É—Ä—Å–∏–≤ - i</i> <code>–ö–æ–¥ - code</code> <pre>–û—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è - pre</pre>"
        bot.reply_to(message, send) # bot.reply_to(message, send, parse_mode='HTML')
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(run_main())


# –í—ã–∑–æ–≤ –º–µ–Ω—é /setup or /menu
@bot.message_handler(commands=['setup', 'menu', 'setings', 'set'])
def main_menu(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    model = types.InlineKeyboardButton(text="–ú–æ–¥–µ–ª—å ChatGPT ü¶æ", callback_data="model")
    time_limit = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –ø–æ–º–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="time_limit")
    reset = types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ üëª", callback_data="reset")
    stat = types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üó£", callback_data="stat")
    close_menu_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚úñÔ∏è", callback_data="close_menu")
    keyboard.add(model, time_limit, reset, stat, close_menu_button)
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:", reply_markup=keyboard)
    #bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é ChatGPT:", reply_markup=keyboard)

# –ü–æ–¥ –º–µ–Ω—é mode_dialog
def model(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    amnesia = types.InlineKeyboardButton(text="–ê–º–Ω–µ–∑–∏—è", callback_data="amnesia")
    dialog = types.InlineKeyboardButton(text="–î–∏–∞–ª–æ–≥", callback_data="dialog")
    keyboard.add(amnesia, dialog)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ ChatGPT:", reply_markup=keyboard)

# –ü–æ–¥ –º–µ–Ω—é time_limit
def time_limit(call):
    bot.answer_callback_query(call.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É time_limit!")
    # keyboard = types.InlineKeyboardMarkup(row_width=2)
    # amnesia = types.InlineKeyboardButton(text="–ê–º–Ω–µ–∑–∏—è", callback_data="amnesia")
    # dialog = types.InlineKeyboardButton(text="–î–∏–∞–ª–æ–≥", callback_data="dialog")
    # keyboard.add(amnesia, dialog)
    # back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    # keyboard.row(back_button)
    # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ ChatGPT:", reply_markup=keyboard)

# –ü–æ–¥ –º–µ–Ω—é reset
def reset(call):
    pass
    bot.answer_callback_query(call.id, text='–í–∞—à –¥–∏–∞–ª–æ–≥ —Å ChatGPT —Å–±—Ä–æ—à–µ–Ω üòâ', show_alert=True)

# –ü–æ–¥ –º–µ–Ω—é stat
def stat(call):
    bot.send_chat_action(call.chat.id, 'typing') # Typing bot
    # settings = get_settings(id)
    # model_chat = settings[7] # –ú–æ–¥–µ–ª—å
    # the_gap = settings[6] # –ß–∞—Å—ã.–º–∏–Ω—É—Ç—ã –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è
    # total_used_token = settings[4] # –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
    # limit_token = settings[5] # –í—ã–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    # bot.answer_callback_query(call.id, text=f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_chat}\n–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {the_gap}\n–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_used_token}\n–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {limit_token}", show_alert=True)

# –ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@bot.callback_query_handler(func=lambda call: call.data == "close_menu")
def handle_close_menu(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

# –†–∞–±–æ—Ç–∞ –ú–µ–Ω—é
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    chat_id = call.message.chat.id if call.message is not None else None

    if call.data == "model":
        model(call)
    elif call.data == "time_limit":
        #bot.answer_callback_query(call.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É mode_dialog!")
        time_limit(call)
    elif call.data == "reset":
        reset(call)
    elif call.data == "stat":
        stat(call)
    elif call.data == "back_menu":
        if chat_id:
            main_menu(call.message)



















#####
start_bot = bot.polling() # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ run_bot.py









# bot.answer_callback_query(
#             callback_query.id,
#             text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)




    # user_id = context.from_user.id
    # user_first_name = context.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # user_last_name = context.from_user.last_name  # –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    # user_username = context.from_user.username  # –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    # chat_id = context.chat.id



