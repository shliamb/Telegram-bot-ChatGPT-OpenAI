import os
import time
import telebot
from telebot import types
import requests
import json
import logging
from dotenv import load_dotenv
load_dotenv()


# –¢–æ–∫–µ–Ω—ã –∏ key –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.environ.get('TELEGRAM_BOT_CHATGPT_API_KEY')
bot = telebot.TeleBot(token)
api_key = os.environ.get('CHATGPT_API_KEY')

#print(f" {token} \n {api_key}")


url = 'https://api.openai.com/v1/chat/completions'
headers = {
    'Authorization': f'Bearer {api_key}',
    'Content-Type': 'application/json'
}


# Options ChatGPT
patch = "–û—Ç–≤–µ—Ç –Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è." # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è—é, —ç–∫–æ–Ω–æ–º–ª—é)–û—Ç–≤–µ—Ç –Ω–µ –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
temp = 0.7 # –£—Ä–æ–≤–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –æ—Ç 0 –¥–æ 1
# temperature = 0, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ, –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –º–µ–Ω–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ.
# temperature = 1, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ —Å–ª–æ–≤, –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
model = "gpt-3.5-turbo"
# gpt-4-1106-preview   150,000 TPM    500 RPM  (turbo)
# gpt-3.5-turbo        60,000 TPM     500 RPM  (cheap)
# gpt-4 


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='log/bot.log', filemode='a', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–ï–ù–Æ

flag_menu = False # –§–ª–∞–≥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —è—Å–Ω–æ, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫, –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª

# –í—ã–∑–æ–≤ –º–µ–Ω—é /start
@bot.message_handler(commands=['start'])
def start(context):
    bot.send_message(context.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {context.from_user.username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.")


# –í—ã–∑–æ–≤ –º–µ–Ω—é /setup
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['setup'])
def main_menu(message):
    global flag_menu
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    version_chat = types.InlineKeyboardButton(text="–í–µ—Ä—Å–∏—è ChatGPT ü¶æ", callback_data="version_chat")
    version_dialog = types.InlineKeyboardButton(text="–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ üó£", callback_data="mode_dialog")
    version_creativity = types.InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üëª", callback_data="level_creativity")
    response_volume = types.InlineKeyboardButton(text="–û–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞", callback_data="response_volume")
    close_menu_button = types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚úñÔ∏è", callback_data="close_menu")
    keyboard.add(version_chat, version_dialog, response_volume, version_creativity, close_menu_button)
    if flag_menu == False:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:", reply_markup=keyboard)
        flag_menu = True
    else:
        #breakpoint
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é ChatGPT:", reply_markup=keyboard)

# –ü–æ–¥ –º–µ–Ω—é version_chat
def version_chat(call):
    global flag_menu
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    gpt_4_1106_preview = types.InlineKeyboardButton(text="GPT-4 1106", callback_data="gpt_4_1106_preview")
    gpt_3_5_turbo  = types.InlineKeyboardButton(text="GPT-3.5 turbo", callback_data="gpt_3_5_turbo")
    gpt_4 = types.InlineKeyboardButton(text="GPT-4", callback_data="gpt_4")
    keyboard.add(gpt_3_5_turbo, gpt_4_1106_preview, gpt_4) # –ü–æ —É—Å–ª–æ–≤–∏—è–º row_width
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu") # –°–Ω–∞—á–∞–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É back_button
    keyboard.row(back_button) # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü, –±–µ–∑ —É—Å–ª–æ–≤–∏–π row_width, –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é ChatGPT:", reply_markup=keyboard)
    flag_menu = True

# –ü–æ–¥ –º–µ–Ω—é mode_dialog
def mode_dialog(call):
    global flag_menu
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    amnesia = types.InlineKeyboardButton(text="–ê–º–Ω–µ–∑–∏—è", callback_data="amnesia")
    dialog = types.InlineKeyboardButton(text="–î–∏–∞–ª–æ–≥", callback_data="dialog")
    keyboard.add(amnesia, dialog)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ ChatGPT:", reply_markup=keyboard)
    flag_menu = True

# –ü–æ–¥ –º–µ–Ω—é level_creativity
def level_creativity(call):
    global flag_menu
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    exactly = types.InlineKeyboardButton(text="–¢–æ—á–Ω–æ", callback_data="exactly")
    average = types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="average")
    creative = types.InlineKeyboardButton(text="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ", callback_data="creative")
    keyboard.add(exactly, average, creative)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ ChatGPT:", reply_markup=keyboard)
    flag_menu = True

# –ü–æ–¥ –º–µ–Ω—é response_volume
def response_volume(call):
    global flag_menu
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    one_sentence = types.InlineKeyboardButton(text="1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="one_sentence")
    two_sentence = types.InlineKeyboardButton(text="3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="two_sentence")
    many_sentence = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ", callback_data="many_sentence")
    keyboard.add(one_sentence, two_sentence, many_sentence)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
    keyboard.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞ ChatGPT:", reply_markup=keyboard)
    flag_menu = True

# –ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@bot.callback_query_handler(func=lambda call: call.data == "close_menu")
def handle_close_menu(call):
    global flag_menu
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    flag_menu = False


# –†–∞–±–æ—Ç–∞ –ú–µ–Ω—é
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global flag_menu
    chat_id = call.message.chat.id if call.message is not None else None
    # message_id = call.message.message_id if call.message is not None else None
    inline_message_id = call.inline_message_id if call.inline_message_id is not None else None

    if call.data == "version_chat":
        version_chat(call)
    elif call.data == "mode_dialog":
        #bot.answer_callback_query(call.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É mode_dialog!")
        mode_dialog(call)
    elif call.data == "level_creativity":
        level_creativity(call)
    elif call.data == "exactly":
        print("exactly")
        #temp = 0
        #return temp
    elif call.data == "response_volume":
        response_volume(call)
    elif call.data == "back_menu":
        if chat_id:
            main_menu(call.message)
            flag_menu = False
        elif inline_message_id:
            print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è inline-—Ä–µ–∂–∏–º–∞") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è inline-—Ä–µ–∂–∏–º–∞
    logger.info(f" - call_dat:'{call.data}' - user_name:{call.from_user.username} - user_id:{call.from_user.id}")


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç message - chatgpt - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
@bot.message_handler(func=lambda message: message.text is not None and not message.text.startswith('/')) # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä Telebot –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ /
def handle_message(message):
    # bot.send_message(message.chat.id, "hi")
    logger.info(f" - message_text:'{message.text}' - user_name:{message.from_user.username} - user_id:{message.from_user.id}")
    # bot.reply_to(message, "hi")
    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å Json –∫ API Openai
    question = message.text + " " +patch
    # print(question)
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    data = {
        "model": model,
        "messages": [{"role": "user", "content": question}],
        "temperature": temp,
    }
    response = requests.post(url, headers=headers, data=json.dumps(data))

    response_data = response.json()  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç

    first_choice_message = response_data['choices'][0]['message']['content']
    # print("\n", first_choice_message, "\n", temp)
    bot.reply_to(message, first_choice_message)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è api, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç
while True:
    try:
        bot.polling(none_stop=True, timeout=10)  # –ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞
        break  # –ï—Å–ª–∏ polling —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    except requests.exceptions.ReadTimeout:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤ —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫


    # user_id = message.from_user.id
    # user_first_name = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # user_last_name = message.from_user.last_name  # –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    # user_username = message.from_user.username  # –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    # chat_id = message.chat.id